
import time
from aiopslab.generators.fault.base import FaultInjector
from aiopslab.service.kubectl import KubeCtl

class UnpatchedVulnerabilityInjector(FaultInjector):
    def __init__(self, namespace: str):
        self.namespace = namespace
        self.kubectl = KubeCtl()

    # Fault: Introduce a known security vulnerability by reverting to an unpatched version
    def inject_unpatched_vulnerability(self, microservices: list[str]):
        """Inject a fault by rolling back a microservice to an unpatched vulnerable version."""
        for service in microservices:
            # Get the deployment associated with the service
            deployment = self.kubectl.get_deployment(service, self.namespace)
            if deployment:
                # Modify the image to use the unpatched (vulnerable) image
                for container in deployment.spec.template.spec.containers:
                    if container.name == f"hotel-reserv-{service}":
                        container.image = f"yinfangchen/{service}:vulnerable"
                self.kubectl.update_deployment(service, self.namespace, deployment)
                print(f"Injected unpatched vulnerability into {service}.")
                time.sleep(10)

    def recover_unpatched_vulnerability(self, microservices: list[str]):
        """Recover from the unpatched vulnerability fault by rolling back to the patched version."""
        for service in microservices:
            deployment = self.kubectl.get_deployment(service, self.namespace)
            if deployment:
                for container in deployment.spec.template.spec.containers:
                    if container.name == f"hotel-reserv-{service}":
                        container.image = f"yinfangchen/{service}:patched"
                self.kubectl.update_deployment(service, self.namespace, deployment)
                print(f"Recovered unpatched vulnerability in {service}.")
                time.sleep(10)

if __name__ == "__main__":
    namespace = "test-hotel-reservation"
    microservices = ["geo", "rate"]
    fault_type = "unpatched_vulnerability"
    print("Start injection/recover ...")
    injector = UnpatchedVulnerabilityInjector(namespace)
    injector.inject_unpatched_vulnerability(microservices)
    # injector.recover_unpatched_vulnerability(microservices)
